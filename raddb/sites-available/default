server default {

  #  listen auth
  listen {
  	type = auth
  	ipaddr = *
  	port = 0
  	limit {
  	      max_connections = 16
  	      lifetime = 0
  	      idle_timeout = 90
  	}
  }
  
  #  listen acct
  listen {
  	type = acct
  	ipaddr = *
  	port = 0
  }
  
  #  listen auth ipv6
  listen {
  	type = auth
  	ipv6addr = ::
  	port = 0
  	limit {
  	      max_connections = 16
  	      lifetime = 0
  	      idle_timeout = 90
  	}
  }
  
  #  listen acct ipv6
  listen {
  	type = acct
  	ipv6addr = ::
  	port = 0
  }

  #  Authorization
  authorize {
  
  	# See policy.d/filter for the definition of the filter_username policy.
  	filter_username
  
  	# takes care of processing the 'raddb/mods-config/preprocess/hints' 
  	# and the 'raddb/mods-config/preprocess/huntgroups' files.
  	preprocess
  
  	# The chap module will set 'Auth-Type := CHAP' if we are
  	# handling a CHAP request and Auth-Type has not already been set
  	chap
  
  	# digest
  	# wimax
  	suffix
  	# ntdomain
  
  	eap {
  		ok = return
  		# updated = return
  	}
  
  	#  Read the 'users' file.  In v3, this is located in
  	#  raddb/mods-config/files/authorize
  	files # comment this later
  
  	#  Look in an SQL database.  The schema of the database
  	#  is meant to mirror the "users" file.
  	#  See "Authorization Queries" in mods-available/sql
  	sql
  
  	#  The ldap module reads passwords from the LDAP database.
  	-ldap
  
  	#  Enforce daily limits on time spent logged in.
  	#  daily
  
  	expiration
  	logintime
  
  	#  This module should be listed last, so that the other modules
  	#  get a chance to set Auth-Type for themselves.
  	#
  	pap
  }
  
  
  #  Authentication.
  # authentication type is then used to pick the appropriate module from the list below.
  authenticate {
  
  	# PAP authentication, when a back-end database listed
  	# in the 'authorize' section supplies a password.  The
  	# password can be clear-text, or encrypted.
  	Auth-Type PAP {
  		pap
  	}
  
  	
  	# Most people want CHAP authentication
  	# A back-end database listed in the 'authorize' section
  	# MUST supply a CLEAR TEXT password.  Encrypted passwords
  	# won't work.
  	Auth-Type CHAP {
  		chap
  	}
  
  	# Allow EAP authentication.
  	eap
  }
  
  
  #  Pre-accounting.  Decide which accounting type to use.
  preacct {
  	preprocess
  
  	#  The start time is: NOW - delay - session_length
  	update request {
  	  	&FreeRADIUS-Acct-Session-Start-Time = "%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}"
  	}
  
  
  	#  Ensure that we have a semi-unique identifier for every
  	#  request, and many NAS boxes are broken.
  	acct_unique
  
  	#  Accounting requests are generally proxied to the same
  	#  home server as authentication requests.
  	suffix
  
  	#  Read the 'acct_users' file
  	files
  }
  
  #  Accounting.  Log the accounting data.
  accounting {
  
  	detail
  
  	#  Log traffic to an SQL database.
  	#  See "Accounting queries" in mods-available/sql
  	sql
  
  	# For Exec-Program and Exec-Program-Wait
  	exec
  
  	# Filter attributes from the accounting response.
  	attr_filter.accounting_response
  }
  
  
  #  Session database, used for checking Simultaneous-Use.
  session {
  	#  See "Simultaneous Use Checking Queries" in mods-available/sql
  	sql
  }
  
  
  #  Post-Authentication
  post-auth {
  	update {
  		&reply: += &session-state:
  	}
  
  	#  See "Authentication Logging Queries" in mods-available/sql
  	sql
  
  	# For Exec-Program and Exec-Program-Wait
  	exec
  
  	#  Remove reply message if the response contains an EAP-Message
  	remove_reply_message_if_eap
  
  	#  Access-Reject packets are sent through the REJECT sub-section of the
  	#  post-auth section.
  	Post-Auth-Type REJECT {
  		# log failed authentications in SQL, too.
  		-sql
  		attr_filter.access_reject
  
  		# Insert EAP-Failure message if the request was
  		# rejected by policy instead of because of an
  		# authentication failure
  		eap
  
  		#  Remove reply message if the response contains an EAP-Message
  		remove_reply_message_if_eap
  	}
  
  	#  Filter access challenges.
  	Post-Auth-Type Challenge {
  	}
  
  }
  
  pre-proxy {
  }

  #  When the server receives a reply to a request it proxied
  #  to a home server, the request may be massaged here, in the
  #  post-proxy stage.
  post-proxy {
  
  	eap
  }
}
